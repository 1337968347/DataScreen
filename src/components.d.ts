/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  MatchResults,
  RouterHistory,
} from '@stencil/router';
import {
  CanvasConfig,
  Column,
  ComData,
  DataScreen,
  DragComOption,
  DraggableApiData,
  DraggableConfig,
  DraggableView,
  TableOption,
} from './interfaces';

export namespace Components {
  interface AppCreate {
    'history': RouterHistory;
  }
  interface AppHome {
    'history': RouterHistory;
    'match': MatchResults;
  }
  interface AppManage {
    'history': RouterHistory;
  }
  interface AppPreview {
    'match': MatchResults;
  }
  interface AppRoot {}
  interface ChartAdapter {
    'comDataApiData': DraggableApiData;
    'comDataConfig': DraggableConfig;
    'comDataView': DraggableView;
    'dataSource': any[];
  }
  interface CyDraggable {
    'canModify': boolean;
    'isChoose': boolean;
    'scale': number;
  }
  interface CyFastClick {}
  interface CyIconfont {
    'name': string;
  }
  interface CyItemExtend {
    'header': string;
    'iconPosition': "start" | "end";
  }
  interface CyLazyImg {
    'alt': string;
    'defaultImg': string;
    'isLazy': boolean;
    'src': string;
  }
  interface CyTable {
    'Columns': Column[];
    'dataSource': any[];
    'option'?: TableOption;
  }
  interface DatascreenCanvas {
    'canModify': boolean;
    'chooseComponentById': (comId: any) => Promise<void>;
    'getCanvasSize': () => Promise<{ w: number; h: number; }>;
    /**
    * 获取大屏数据
    * @param DataScreenId 传一个唯一id ，作为大屏的id
    */
    'getDataScreen': (DataScreenId: string) => Promise<DataScreen>;
    'mapComDatasToState': (comList: ComData[]) => Promise<void>;
    'scale': number;
    'setCanvasConfig': (config: CanvasConfig) => Promise<void>;
    /**
    * 初始化设置大屏数据
    * @param DataScreenId 传一个唯一id ，作为大屏的id
    * @param dataScreen 大屏相关数据
    * @param isLocalUpDate 是否更新 大屏相关的数据到localstorage
    */
    'setDataScreen': (DataScreenId: string, dataScreen: DataScreen, isLocalUpDate?: boolean) => Promise<void>;
  }
  interface DatascreenCanvasContent {
    'maxCanvasSCale': number;
    'minCanvasScale': number;
    'padding': number;
    'resizeSCale': () => Promise<void>;
  }
  interface DatascreenComPanel {}
  interface DatascreenEditMain {
    'dataScreenId': string;
  }
  interface DatascreenHeader {
    'checkMenuControl': boolean[];
    'dataScreenId': string;
    'history': RouterHistory;
  }
  interface DatascreenLayerPanel {
    'chooseComponentById': (comId: any) => Promise<void>;
    'mapComIdsToState': (newComIdList: string[]) => Promise<void>;
  }
  interface DatascreenSettingPanel {
    'setCanvasConfig': (canvasConfig: CanvasConfig) => Promise<void>;
    'setComponentConfigData': (comData: any) => Promise<void>;
  }
  interface DraggableAdapter {
    'canModify': boolean;
    'comOptionData': ComData;
  }
  interface MediaAdapter {
    'canModify': boolean;
    'comData': ComData;
    'dataSource': any;
  }
  interface PopoverCodeModify {
    'dataScreenId': string;
    'dismissCallBack'?: Function;
  }
  interface PopoverDraggableContextmenu {
    'comId': string;
  }
  interface PopoverTheme {}
  interface SettingCanvasOption {
    'canvasOption': CanvasConfig;
  }
  interface SettingChartSeries {
    'series': any[];
  }
  interface SettingCommonConfig {
    'comData': DragComOption;
  }
  interface SettingDataConfig {
    'comDataApiData': DraggableApiData;
    'comId': string;
  }
  interface TableAdapter {
    'comDataConfig': DraggableConfig;
    'comDataView': DraggableView;
    'dataSource': any;
  }
  interface TextAdapter {
    'comData': ComData;
  }
}

declare global {


  interface HTMLAppCreateElement extends Components.AppCreate, HTMLStencilElement {}
  var HTMLAppCreateElement: {
    prototype: HTMLAppCreateElement;
    new (): HTMLAppCreateElement;
  };

  interface HTMLAppHomeElement extends Components.AppHome, HTMLStencilElement {}
  var HTMLAppHomeElement: {
    prototype: HTMLAppHomeElement;
    new (): HTMLAppHomeElement;
  };

  interface HTMLAppManageElement extends Components.AppManage, HTMLStencilElement {}
  var HTMLAppManageElement: {
    prototype: HTMLAppManageElement;
    new (): HTMLAppManageElement;
  };

  interface HTMLAppPreviewElement extends Components.AppPreview, HTMLStencilElement {}
  var HTMLAppPreviewElement: {
    prototype: HTMLAppPreviewElement;
    new (): HTMLAppPreviewElement;
  };

  interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {}
  var HTMLAppRootElement: {
    prototype: HTMLAppRootElement;
    new (): HTMLAppRootElement;
  };

  interface HTMLChartAdapterElement extends Components.ChartAdapter, HTMLStencilElement {}
  var HTMLChartAdapterElement: {
    prototype: HTMLChartAdapterElement;
    new (): HTMLChartAdapterElement;
  };

  interface HTMLCyDraggableElement extends Components.CyDraggable, HTMLStencilElement {}
  var HTMLCyDraggableElement: {
    prototype: HTMLCyDraggableElement;
    new (): HTMLCyDraggableElement;
  };

  interface HTMLCyFastClickElement extends Components.CyFastClick, HTMLStencilElement {}
  var HTMLCyFastClickElement: {
    prototype: HTMLCyFastClickElement;
    new (): HTMLCyFastClickElement;
  };

  interface HTMLCyIconfontElement extends Components.CyIconfont, HTMLStencilElement {}
  var HTMLCyIconfontElement: {
    prototype: HTMLCyIconfontElement;
    new (): HTMLCyIconfontElement;
  };

  interface HTMLCyItemExtendElement extends Components.CyItemExtend, HTMLStencilElement {}
  var HTMLCyItemExtendElement: {
    prototype: HTMLCyItemExtendElement;
    new (): HTMLCyItemExtendElement;
  };

  interface HTMLCyLazyImgElement extends Components.CyLazyImg, HTMLStencilElement {}
  var HTMLCyLazyImgElement: {
    prototype: HTMLCyLazyImgElement;
    new (): HTMLCyLazyImgElement;
  };

  interface HTMLCyTableElement extends Components.CyTable, HTMLStencilElement {}
  var HTMLCyTableElement: {
    prototype: HTMLCyTableElement;
    new (): HTMLCyTableElement;
  };

  interface HTMLDatascreenCanvasElement extends Components.DatascreenCanvas, HTMLStencilElement {}
  var HTMLDatascreenCanvasElement: {
    prototype: HTMLDatascreenCanvasElement;
    new (): HTMLDatascreenCanvasElement;
  };

  interface HTMLDatascreenCanvasContentElement extends Components.DatascreenCanvasContent, HTMLStencilElement {}
  var HTMLDatascreenCanvasContentElement: {
    prototype: HTMLDatascreenCanvasContentElement;
    new (): HTMLDatascreenCanvasContentElement;
  };

  interface HTMLDatascreenComPanelElement extends Components.DatascreenComPanel, HTMLStencilElement {}
  var HTMLDatascreenComPanelElement: {
    prototype: HTMLDatascreenComPanelElement;
    new (): HTMLDatascreenComPanelElement;
  };

  interface HTMLDatascreenEditMainElement extends Components.DatascreenEditMain, HTMLStencilElement {}
  var HTMLDatascreenEditMainElement: {
    prototype: HTMLDatascreenEditMainElement;
    new (): HTMLDatascreenEditMainElement;
  };

  interface HTMLDatascreenHeaderElement extends Components.DatascreenHeader, HTMLStencilElement {}
  var HTMLDatascreenHeaderElement: {
    prototype: HTMLDatascreenHeaderElement;
    new (): HTMLDatascreenHeaderElement;
  };

  interface HTMLDatascreenLayerPanelElement extends Components.DatascreenLayerPanel, HTMLStencilElement {}
  var HTMLDatascreenLayerPanelElement: {
    prototype: HTMLDatascreenLayerPanelElement;
    new (): HTMLDatascreenLayerPanelElement;
  };

  interface HTMLDatascreenSettingPanelElement extends Components.DatascreenSettingPanel, HTMLStencilElement {}
  var HTMLDatascreenSettingPanelElement: {
    prototype: HTMLDatascreenSettingPanelElement;
    new (): HTMLDatascreenSettingPanelElement;
  };

  interface HTMLDraggableAdapterElement extends Components.DraggableAdapter, HTMLStencilElement {}
  var HTMLDraggableAdapterElement: {
    prototype: HTMLDraggableAdapterElement;
    new (): HTMLDraggableAdapterElement;
  };

  interface HTMLMediaAdapterElement extends Components.MediaAdapter, HTMLStencilElement {}
  var HTMLMediaAdapterElement: {
    prototype: HTMLMediaAdapterElement;
    new (): HTMLMediaAdapterElement;
  };

  interface HTMLPopoverCodeModifyElement extends Components.PopoverCodeModify, HTMLStencilElement {}
  var HTMLPopoverCodeModifyElement: {
    prototype: HTMLPopoverCodeModifyElement;
    new (): HTMLPopoverCodeModifyElement;
  };

  interface HTMLPopoverDraggableContextmenuElement extends Components.PopoverDraggableContextmenu, HTMLStencilElement {}
  var HTMLPopoverDraggableContextmenuElement: {
    prototype: HTMLPopoverDraggableContextmenuElement;
    new (): HTMLPopoverDraggableContextmenuElement;
  };

  interface HTMLPopoverThemeElement extends Components.PopoverTheme, HTMLStencilElement {}
  var HTMLPopoverThemeElement: {
    prototype: HTMLPopoverThemeElement;
    new (): HTMLPopoverThemeElement;
  };

  interface HTMLSettingCanvasOptionElement extends Components.SettingCanvasOption, HTMLStencilElement {}
  var HTMLSettingCanvasOptionElement: {
    prototype: HTMLSettingCanvasOptionElement;
    new (): HTMLSettingCanvasOptionElement;
  };

  interface HTMLSettingChartSeriesElement extends Components.SettingChartSeries, HTMLStencilElement {}
  var HTMLSettingChartSeriesElement: {
    prototype: HTMLSettingChartSeriesElement;
    new (): HTMLSettingChartSeriesElement;
  };

  interface HTMLSettingCommonConfigElement extends Components.SettingCommonConfig, HTMLStencilElement {}
  var HTMLSettingCommonConfigElement: {
    prototype: HTMLSettingCommonConfigElement;
    new (): HTMLSettingCommonConfigElement;
  };

  interface HTMLSettingDataConfigElement extends Components.SettingDataConfig, HTMLStencilElement {}
  var HTMLSettingDataConfigElement: {
    prototype: HTMLSettingDataConfigElement;
    new (): HTMLSettingDataConfigElement;
  };

  interface HTMLTableAdapterElement extends Components.TableAdapter, HTMLStencilElement {}
  var HTMLTableAdapterElement: {
    prototype: HTMLTableAdapterElement;
    new (): HTMLTableAdapterElement;
  };

  interface HTMLTextAdapterElement extends Components.TextAdapter, HTMLStencilElement {}
  var HTMLTextAdapterElement: {
    prototype: HTMLTextAdapterElement;
    new (): HTMLTextAdapterElement;
  };
  interface HTMLElementTagNameMap {
    'app-create': HTMLAppCreateElement;
    'app-home': HTMLAppHomeElement;
    'app-manage': HTMLAppManageElement;
    'app-preview': HTMLAppPreviewElement;
    'app-root': HTMLAppRootElement;
    'chart-adapter': HTMLChartAdapterElement;
    'cy-draggable': HTMLCyDraggableElement;
    'cy-fast-click': HTMLCyFastClickElement;
    'cy-iconfont': HTMLCyIconfontElement;
    'cy-item-extend': HTMLCyItemExtendElement;
    'cy-lazy-img': HTMLCyLazyImgElement;
    'cy-table': HTMLCyTableElement;
    'datascreen-canvas': HTMLDatascreenCanvasElement;
    'datascreen-canvas-content': HTMLDatascreenCanvasContentElement;
    'datascreen-com-panel': HTMLDatascreenComPanelElement;
    'datascreen-edit-main': HTMLDatascreenEditMainElement;
    'datascreen-header': HTMLDatascreenHeaderElement;
    'datascreen-layer-panel': HTMLDatascreenLayerPanelElement;
    'datascreen-setting-panel': HTMLDatascreenSettingPanelElement;
    'draggable-adapter': HTMLDraggableAdapterElement;
    'media-adapter': HTMLMediaAdapterElement;
    'popover-code-modify': HTMLPopoverCodeModifyElement;
    'popover-draggable-contextmenu': HTMLPopoverDraggableContextmenuElement;
    'popover-theme': HTMLPopoverThemeElement;
    'setting-canvas-option': HTMLSettingCanvasOptionElement;
    'setting-chart-series': HTMLSettingChartSeriesElement;
    'setting-common-config': HTMLSettingCommonConfigElement;
    'setting-data-config': HTMLSettingDataConfigElement;
    'table-adapter': HTMLTableAdapterElement;
    'text-adapter': HTMLTextAdapterElement;
  }
}

declare namespace LocalJSX {
  interface AppCreate {
    'history'?: RouterHistory;
    'onAlert'?: (event: CustomEvent<any>) => void;
    'onToast'?: (event: CustomEvent<any>) => void;
  }
  interface AppHome {
    'history'?: RouterHistory;
    'match'?: MatchResults;
    'onAlert'?: (event: CustomEvent<any>) => void;
    'onToast'?: (event: CustomEvent<any>) => void;
  }
  interface AppManage {
    'history'?: RouterHistory;
    'onAlert'?: (event: CustomEvent<any>) => void;
    'onPopover'?: (event: CustomEvent<any>) => void;
  }
  interface AppPreview {
    'match'?: MatchResults;
  }
  interface AppRoot {}
  interface ChartAdapter {
    'comDataApiData'?: DraggableApiData;
    'comDataConfig'?: DraggableConfig;
    'comDataView'?: DraggableView;
    'dataSource'?: any[];
  }
  interface CyDraggable {
    'canModify'?: boolean;
    'isChoose'?: boolean;
    'onChoose'?: (event: CustomEvent<any>) => void;
    'onCyDrag'?: (event: CustomEvent<any>) => void;
    'onCyScale'?: (event: CustomEvent<any>) => void;
    'scale'?: number;
  }
  interface CyFastClick {
    'onFastClick'?: (event: CustomEvent<any>) => void;
  }
  interface CyIconfont {
    'name'?: string;
  }
  interface CyItemExtend {
    'header'?: string;
    'iconPosition'?: "start" | "end";
  }
  interface CyLazyImg {
    'alt'?: string;
    'defaultImg'?: string;
    'isLazy'?: boolean;
    'src'?: string;
  }
  interface CyTable {
    'Columns'?: Column[];
    'dataSource'?: any[];
    'option'?: TableOption;
  }
  interface DatascreenCanvas {
    'canModify'?: boolean;
    'onCanvasChange'?: (event: CustomEvent<any>) => void;
    'onPopover'?: (event: CustomEvent<any>) => void;
    'scale'?: number;
  }
  interface DatascreenCanvasContent {
    'maxCanvasSCale'?: number;
    'minCanvasScale'?: number;
    'onCanvasScaleChange'?: (event: CustomEvent<any>) => void;
    'padding'?: number;
  }
  interface DatascreenComPanel {
    'onCheckMenu'?: (event: CustomEvent<any>) => void;
  }
  interface DatascreenEditMain {
    'dataScreenId'?: string;
  }
  interface DatascreenHeader {
    'checkMenuControl'?: boolean[];
    'dataScreenId'?: string;
    'history'?: RouterHistory;
    'onCheckMenu'?: (event: CustomEvent<any>) => void;
    'onPopover'?: (event: CustomEvent<any>) => void;
  }
  interface DatascreenLayerPanel {
    'onCheckMenu'?: (event: CustomEvent<any>) => void;
  }
  interface DatascreenSettingPanel {
    'onAlert'?: (event: CustomEvent<any>) => void;
  }
  interface DraggableAdapter {
    'canModify'?: boolean;
    'comOptionData'?: ComData;
    'onAlert'?: (event: CustomEvent<any>) => void;
    'onToast'?: (event: CustomEvent<any>) => void;
  }
  interface MediaAdapter {
    'canModify'?: boolean;
    'comData'?: ComData;
    'dataSource'?: any;
  }
  interface PopoverCodeModify {
    'dataScreenId'?: string;
    'dismissCallBack'?: Function;
    'onToast'?: (event: CustomEvent<any>) => void;
  }
  interface PopoverDraggableContextmenu {
    'comId'?: string;
    'onToast'?: (event: CustomEvent<any>) => void;
  }
  interface PopoverTheme {}
  interface SettingCanvasOption {
    'canvasOption'?: CanvasConfig;
    'onToast'?: (event: CustomEvent<any>) => void;
  }
  interface SettingChartSeries {
    'onCyChange'?: (event: CustomEvent<any>) => void;
    'series'?: any[];
  }
  interface SettingCommonConfig {
    'comData'?: DragComOption;
    'onCyChange'?: (event: CustomEvent<any>) => void;
  }
  interface SettingDataConfig {
    'comDataApiData'?: DraggableApiData;
    'comId'?: string;
    'onCyChange'?: (event: CustomEvent<any>) => void;
    'onToast'?: (event: CustomEvent<any>) => void;
  }
  interface TableAdapter {
    'comDataConfig'?: DraggableConfig;
    'comDataView'?: DraggableView;
    'dataSource'?: any;
  }
  interface TextAdapter {
    'comData'?: ComData;
  }

  interface IntrinsicElements {
    'app-create': AppCreate;
    'app-home': AppHome;
    'app-manage': AppManage;
    'app-preview': AppPreview;
    'app-root': AppRoot;
    'chart-adapter': ChartAdapter;
    'cy-draggable': CyDraggable;
    'cy-fast-click': CyFastClick;
    'cy-iconfont': CyIconfont;
    'cy-item-extend': CyItemExtend;
    'cy-lazy-img': CyLazyImg;
    'cy-table': CyTable;
    'datascreen-canvas': DatascreenCanvas;
    'datascreen-canvas-content': DatascreenCanvasContent;
    'datascreen-com-panel': DatascreenComPanel;
    'datascreen-edit-main': DatascreenEditMain;
    'datascreen-header': DatascreenHeader;
    'datascreen-layer-panel': DatascreenLayerPanel;
    'datascreen-setting-panel': DatascreenSettingPanel;
    'draggable-adapter': DraggableAdapter;
    'media-adapter': MediaAdapter;
    'popover-code-modify': PopoverCodeModify;
    'popover-draggable-contextmenu': PopoverDraggableContextmenu;
    'popover-theme': PopoverTheme;
    'setting-canvas-option': SettingCanvasOption;
    'setting-chart-series': SettingChartSeries;
    'setting-common-config': SettingCommonConfig;
    'setting-data-config': SettingDataConfig;
    'table-adapter': TableAdapter;
    'text-adapter': TextAdapter;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'app-create': LocalJSX.AppCreate & JSXBase.HTMLAttributes<HTMLAppCreateElement>;
      'app-home': LocalJSX.AppHome & JSXBase.HTMLAttributes<HTMLAppHomeElement>;
      'app-manage': LocalJSX.AppManage & JSXBase.HTMLAttributes<HTMLAppManageElement>;
      'app-preview': LocalJSX.AppPreview & JSXBase.HTMLAttributes<HTMLAppPreviewElement>;
      'app-root': LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
      'chart-adapter': LocalJSX.ChartAdapter & JSXBase.HTMLAttributes<HTMLChartAdapterElement>;
      'cy-draggable': LocalJSX.CyDraggable & JSXBase.HTMLAttributes<HTMLCyDraggableElement>;
      'cy-fast-click': LocalJSX.CyFastClick & JSXBase.HTMLAttributes<HTMLCyFastClickElement>;
      'cy-iconfont': LocalJSX.CyIconfont & JSXBase.HTMLAttributes<HTMLCyIconfontElement>;
      'cy-item-extend': LocalJSX.CyItemExtend & JSXBase.HTMLAttributes<HTMLCyItemExtendElement>;
      'cy-lazy-img': LocalJSX.CyLazyImg & JSXBase.HTMLAttributes<HTMLCyLazyImgElement>;
      'cy-table': LocalJSX.CyTable & JSXBase.HTMLAttributes<HTMLCyTableElement>;
      'datascreen-canvas': LocalJSX.DatascreenCanvas & JSXBase.HTMLAttributes<HTMLDatascreenCanvasElement>;
      'datascreen-canvas-content': LocalJSX.DatascreenCanvasContent & JSXBase.HTMLAttributes<HTMLDatascreenCanvasContentElement>;
      'datascreen-com-panel': LocalJSX.DatascreenComPanel & JSXBase.HTMLAttributes<HTMLDatascreenComPanelElement>;
      'datascreen-edit-main': LocalJSX.DatascreenEditMain & JSXBase.HTMLAttributes<HTMLDatascreenEditMainElement>;
      'datascreen-header': LocalJSX.DatascreenHeader & JSXBase.HTMLAttributes<HTMLDatascreenHeaderElement>;
      'datascreen-layer-panel': LocalJSX.DatascreenLayerPanel & JSXBase.HTMLAttributes<HTMLDatascreenLayerPanelElement>;
      'datascreen-setting-panel': LocalJSX.DatascreenSettingPanel & JSXBase.HTMLAttributes<HTMLDatascreenSettingPanelElement>;
      'draggable-adapter': LocalJSX.DraggableAdapter & JSXBase.HTMLAttributes<HTMLDraggableAdapterElement>;
      'media-adapter': LocalJSX.MediaAdapter & JSXBase.HTMLAttributes<HTMLMediaAdapterElement>;
      'popover-code-modify': LocalJSX.PopoverCodeModify & JSXBase.HTMLAttributes<HTMLPopoverCodeModifyElement>;
      'popover-draggable-contextmenu': LocalJSX.PopoverDraggableContextmenu & JSXBase.HTMLAttributes<HTMLPopoverDraggableContextmenuElement>;
      'popover-theme': LocalJSX.PopoverTheme & JSXBase.HTMLAttributes<HTMLPopoverThemeElement>;
      'setting-canvas-option': LocalJSX.SettingCanvasOption & JSXBase.HTMLAttributes<HTMLSettingCanvasOptionElement>;
      'setting-chart-series': LocalJSX.SettingChartSeries & JSXBase.HTMLAttributes<HTMLSettingChartSeriesElement>;
      'setting-common-config': LocalJSX.SettingCommonConfig & JSXBase.HTMLAttributes<HTMLSettingCommonConfigElement>;
      'setting-data-config': LocalJSX.SettingDataConfig & JSXBase.HTMLAttributes<HTMLSettingDataConfigElement>;
      'table-adapter': LocalJSX.TableAdapter & JSXBase.HTMLAttributes<HTMLTableAdapterElement>;
      'text-adapter': LocalJSX.TextAdapter & JSXBase.HTMLAttributes<HTMLTextAdapterElement>;
    }
  }
}


