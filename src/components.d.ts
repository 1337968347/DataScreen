/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  CanvasConfig,
  ComType,
} from './interfaces';

export namespace Components {
  interface AppCreate {}
  interface AppHome {}
  interface AppManage {}
  interface AppPreview {}
  interface AppRoot {}
  interface ChartBasicLine {
    'comData': ComType;
  }
  interface CyDraggable {
    'canModify': boolean;
    'isChoose': boolean;
    'scale': number;
  }
  interface CyFastClick {}
  interface CyLazyImg {
    'alt': string;
    'defaultImg': string;
    'isLazy': boolean;
    'src': string;
  }
  interface DatascreenCanvas {
    'canModify': boolean;
    'chooseComponent': (comId: any) => Promise<void>;
    'mapComDatasToState': (comList: ComType[]) => Promise<void>;
    'scale': number;
    'updateCanvasConfig': (config: CanvasConfig) => Promise<void>;
  }
  interface DatascreenComPanel {}
  interface DatascreenEditMain {}
  interface DatascreenHeader {
    'checkMenuControl': boolean[];
  }
  interface DatascreenLayer {
    'chooseComponent': (comId: any) => Promise<void>;
    'mapComIdsToState': (newComIdList: string[]) => Promise<void>;
  }
  interface DatascreenSettingPanel {
    'setComponentConfigData': (comData: any) => Promise<void>;
  }
  interface DraggableAdapter {
    'comOptionData': ComType;
  }
  interface MediaBasicImg {
    'comData': ComType;
  }
  interface MediaBasicImgConfig {
    'draggableConfig': any;
  }
  interface PopoverCodeView {}
  interface PopoverTheme {}
  interface SettingCanvasOption {}
}

declare global {


  interface HTMLAppCreateElement extends Components.AppCreate, HTMLStencilElement {}
  var HTMLAppCreateElement: {
    prototype: HTMLAppCreateElement;
    new (): HTMLAppCreateElement;
  };

  interface HTMLAppHomeElement extends Components.AppHome, HTMLStencilElement {}
  var HTMLAppHomeElement: {
    prototype: HTMLAppHomeElement;
    new (): HTMLAppHomeElement;
  };

  interface HTMLAppManageElement extends Components.AppManage, HTMLStencilElement {}
  var HTMLAppManageElement: {
    prototype: HTMLAppManageElement;
    new (): HTMLAppManageElement;
  };

  interface HTMLAppPreviewElement extends Components.AppPreview, HTMLStencilElement {}
  var HTMLAppPreviewElement: {
    prototype: HTMLAppPreviewElement;
    new (): HTMLAppPreviewElement;
  };

  interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {}
  var HTMLAppRootElement: {
    prototype: HTMLAppRootElement;
    new (): HTMLAppRootElement;
  };

  interface HTMLChartBasicLineElement extends Components.ChartBasicLine, HTMLStencilElement {}
  var HTMLChartBasicLineElement: {
    prototype: HTMLChartBasicLineElement;
    new (): HTMLChartBasicLineElement;
  };

  interface HTMLCyDraggableElement extends Components.CyDraggable, HTMLStencilElement {}
  var HTMLCyDraggableElement: {
    prototype: HTMLCyDraggableElement;
    new (): HTMLCyDraggableElement;
  };

  interface HTMLCyFastClickElement extends Components.CyFastClick, HTMLStencilElement {}
  var HTMLCyFastClickElement: {
    prototype: HTMLCyFastClickElement;
    new (): HTMLCyFastClickElement;
  };

  interface HTMLCyLazyImgElement extends Components.CyLazyImg, HTMLStencilElement {}
  var HTMLCyLazyImgElement: {
    prototype: HTMLCyLazyImgElement;
    new (): HTMLCyLazyImgElement;
  };

  interface HTMLDatascreenCanvasElement extends Components.DatascreenCanvas, HTMLStencilElement {}
  var HTMLDatascreenCanvasElement: {
    prototype: HTMLDatascreenCanvasElement;
    new (): HTMLDatascreenCanvasElement;
  };

  interface HTMLDatascreenComPanelElement extends Components.DatascreenComPanel, HTMLStencilElement {}
  var HTMLDatascreenComPanelElement: {
    prototype: HTMLDatascreenComPanelElement;
    new (): HTMLDatascreenComPanelElement;
  };

  interface HTMLDatascreenEditMainElement extends Components.DatascreenEditMain, HTMLStencilElement {}
  var HTMLDatascreenEditMainElement: {
    prototype: HTMLDatascreenEditMainElement;
    new (): HTMLDatascreenEditMainElement;
  };

  interface HTMLDatascreenHeaderElement extends Components.DatascreenHeader, HTMLStencilElement {}
  var HTMLDatascreenHeaderElement: {
    prototype: HTMLDatascreenHeaderElement;
    new (): HTMLDatascreenHeaderElement;
  };

  interface HTMLDatascreenLayerElement extends Components.DatascreenLayer, HTMLStencilElement {}
  var HTMLDatascreenLayerElement: {
    prototype: HTMLDatascreenLayerElement;
    new (): HTMLDatascreenLayerElement;
  };

  interface HTMLDatascreenSettingPanelElement extends Components.DatascreenSettingPanel, HTMLStencilElement {}
  var HTMLDatascreenSettingPanelElement: {
    prototype: HTMLDatascreenSettingPanelElement;
    new (): HTMLDatascreenSettingPanelElement;
  };

  interface HTMLDraggableAdapterElement extends Components.DraggableAdapter, HTMLStencilElement {}
  var HTMLDraggableAdapterElement: {
    prototype: HTMLDraggableAdapterElement;
    new (): HTMLDraggableAdapterElement;
  };

  interface HTMLMediaBasicImgElement extends Components.MediaBasicImg, HTMLStencilElement {}
  var HTMLMediaBasicImgElement: {
    prototype: HTMLMediaBasicImgElement;
    new (): HTMLMediaBasicImgElement;
  };

  interface HTMLMediaBasicImgConfigElement extends Components.MediaBasicImgConfig, HTMLStencilElement {}
  var HTMLMediaBasicImgConfigElement: {
    prototype: HTMLMediaBasicImgConfigElement;
    new (): HTMLMediaBasicImgConfigElement;
  };

  interface HTMLPopoverCodeViewElement extends Components.PopoverCodeView, HTMLStencilElement {}
  var HTMLPopoverCodeViewElement: {
    prototype: HTMLPopoverCodeViewElement;
    new (): HTMLPopoverCodeViewElement;
  };

  interface HTMLPopoverThemeElement extends Components.PopoverTheme, HTMLStencilElement {}
  var HTMLPopoverThemeElement: {
    prototype: HTMLPopoverThemeElement;
    new (): HTMLPopoverThemeElement;
  };

  interface HTMLSettingCanvasOptionElement extends Components.SettingCanvasOption, HTMLStencilElement {}
  var HTMLSettingCanvasOptionElement: {
    prototype: HTMLSettingCanvasOptionElement;
    new (): HTMLSettingCanvasOptionElement;
  };
  interface HTMLElementTagNameMap {
    'app-create': HTMLAppCreateElement;
    'app-home': HTMLAppHomeElement;
    'app-manage': HTMLAppManageElement;
    'app-preview': HTMLAppPreviewElement;
    'app-root': HTMLAppRootElement;
    'chart-basic-line': HTMLChartBasicLineElement;
    'cy-draggable': HTMLCyDraggableElement;
    'cy-fast-click': HTMLCyFastClickElement;
    'cy-lazy-img': HTMLCyLazyImgElement;
    'datascreen-canvas': HTMLDatascreenCanvasElement;
    'datascreen-com-panel': HTMLDatascreenComPanelElement;
    'datascreen-edit-main': HTMLDatascreenEditMainElement;
    'datascreen-header': HTMLDatascreenHeaderElement;
    'datascreen-layer': HTMLDatascreenLayerElement;
    'datascreen-setting-panel': HTMLDatascreenSettingPanelElement;
    'draggable-adapter': HTMLDraggableAdapterElement;
    'media-basic-img': HTMLMediaBasicImgElement;
    'media-basic-img-config': HTMLMediaBasicImgConfigElement;
    'popover-code-view': HTMLPopoverCodeViewElement;
    'popover-theme': HTMLPopoverThemeElement;
    'setting-canvas-option': HTMLSettingCanvasOptionElement;
  }
}

declare namespace LocalJSX {
  interface AppCreate extends JSXBase.HTMLAttributes<HTMLAppCreateElement> {}
  interface AppHome extends JSXBase.HTMLAttributes<HTMLAppHomeElement> {
    'onAlert'?: (event: CustomEvent<any>) => void;
    'onToast'?: (event: CustomEvent<any>) => void;
  }
  interface AppManage extends JSXBase.HTMLAttributes<HTMLAppManageElement> {}
  interface AppPreview extends JSXBase.HTMLAttributes<HTMLAppPreviewElement> {}
  interface AppRoot extends JSXBase.HTMLAttributes<HTMLAppRootElement> {}
  interface ChartBasicLine extends JSXBase.HTMLAttributes<HTMLChartBasicLineElement> {
    'comData'?: ComType;
  }
  interface CyDraggable extends JSXBase.HTMLAttributes<HTMLCyDraggableElement> {
    'canModify'?: boolean;
    'isChoose'?: boolean;
    'onChoose'?: (event: CustomEvent<any>) => void;
    'onCyDrag'?: (event: CustomEvent<any>) => void;
    'onCyScale'?: (event: CustomEvent<any>) => void;
    'scale'?: number;
  }
  interface CyFastClick extends JSXBase.HTMLAttributes<HTMLCyFastClickElement> {
    'onFastClick'?: (event: CustomEvent<any>) => void;
  }
  interface CyLazyImg extends JSXBase.HTMLAttributes<HTMLCyLazyImgElement> {
    'alt'?: string;
    'defaultImg'?: string;
    'isLazy'?: boolean;
    'src'?: string;
  }
  interface DatascreenCanvas extends JSXBase.HTMLAttributes<HTMLDatascreenCanvasElement> {
    'canModify'?: boolean;
    'onPopover'?: (event: CustomEvent<any>) => void;
    'scale'?: number;
  }
  interface DatascreenComPanel extends JSXBase.HTMLAttributes<HTMLDatascreenComPanelElement> {
    'onCheckMenu'?: (event: CustomEvent<any>) => void;
  }
  interface DatascreenEditMain extends JSXBase.HTMLAttributes<HTMLDatascreenEditMainElement> {}
  interface DatascreenHeader extends JSXBase.HTMLAttributes<HTMLDatascreenHeaderElement> {
    'checkMenuControl'?: boolean[];
    'onCheckMenu'?: (event: CustomEvent<any>) => void;
    'onPopover'?: (event: CustomEvent<any>) => void;
  }
  interface DatascreenLayer extends JSXBase.HTMLAttributes<HTMLDatascreenLayerElement> {
    'onCheckMenu'?: (event: CustomEvent<any>) => void;
  }
  interface DatascreenSettingPanel extends JSXBase.HTMLAttributes<HTMLDatascreenSettingPanelElement> {}
  interface DraggableAdapter extends JSXBase.HTMLAttributes<HTMLDraggableAdapterElement> {
    'comOptionData'?: ComType;
    'onAlert'?: (event: CustomEvent<any>) => void;
    'onToast'?: (event: CustomEvent<any>) => void;
  }
  interface MediaBasicImg extends JSXBase.HTMLAttributes<HTMLMediaBasicImgElement> {
    'comData'?: ComType;
  }
  interface MediaBasicImgConfig extends JSXBase.HTMLAttributes<HTMLMediaBasicImgConfigElement> {
    'draggableConfig'?: any;
    'onConfigChange'?: (event: CustomEvent<any>) => void;
  }
  interface PopoverCodeView extends JSXBase.HTMLAttributes<HTMLPopoverCodeViewElement> {
    'onToast'?: (event: CustomEvent<any>) => void;
  }
  interface PopoverTheme extends JSXBase.HTMLAttributes<HTMLPopoverThemeElement> {}
  interface SettingCanvasOption extends JSXBase.HTMLAttributes<HTMLSettingCanvasOptionElement> {}

  interface IntrinsicElements {
    'app-create': AppCreate;
    'app-home': AppHome;
    'app-manage': AppManage;
    'app-preview': AppPreview;
    'app-root': AppRoot;
    'chart-basic-line': ChartBasicLine;
    'cy-draggable': CyDraggable;
    'cy-fast-click': CyFastClick;
    'cy-lazy-img': CyLazyImg;
    'datascreen-canvas': DatascreenCanvas;
    'datascreen-com-panel': DatascreenComPanel;
    'datascreen-edit-main': DatascreenEditMain;
    'datascreen-header': DatascreenHeader;
    'datascreen-layer': DatascreenLayer;
    'datascreen-setting-panel': DatascreenSettingPanel;
    'draggable-adapter': DraggableAdapter;
    'media-basic-img': MediaBasicImg;
    'media-basic-img-config': MediaBasicImgConfig;
    'popover-code-view': PopoverCodeView;
    'popover-theme': PopoverTheme;
    'setting-canvas-option': SettingCanvasOption;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


